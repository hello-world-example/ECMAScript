<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>首页 on ECMAScript</title>
    <link>https://hello-world-example.github.io/ECMAScript/</link>
    <description>Recent content in 首页 on ECMAScript</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://hello-world-example.github.io/ECMAScript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/ECMAScript/_sidebar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/ECMAScript/_sidebar/</guid>
      <description> Statements  循环语句  内置对象  Object Promise   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/ECMAScript/docs/Global_Objects/Object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/ECMAScript/docs/Global_Objects/Object/</guid>
      <description> Object 对象  JavaScript 参考 &amp;gt; JavaScript 标准内置对象 &amp;gt; Object
 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/ECMAScript/docs/Global_Objects/Promise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/ECMAScript/docs/Global_Objects/Promise/</guid>
      <description>Promise   JavaScript 参考 &amp;gt; JavaScript 标准内置对象 &amp;gt; Promise ECMAScript 6 入门 Promise 对象   Promise 简单说就是一个容器，里面保存着某个未来才会结束的事件，是异步编程的一种解决方案，比传统的 &amp;ldquo;回调函数和事件&amp;rdquo; 解决方案更合理和更强大。优点在于将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。
 有三种状态：pending（进行中）、fulfilled（已成功 resolve）、rejected（已失败） 状态变化只能从 pending 变为 fulfilled( resolve) 、从 pending变为 rejected 一旦状态改变，就不会再变，再对 Promise 对象添加回调函数，也会立即得到这个结果  then / catch / finally const getJSON = function(url) { const promise = new Promise(function(resolve, reject){ const handler = function() { if (this.readyState !== 4) { return; } if (this.status === 200) { // 把正确的结果通知出去  resolve(this.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/ECMAScript/docs/Statements/For/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/ECMAScript/docs/Statements/For/</guid>
      <description>循环语句 for&amp;hellip;in  遍历数组下标，obj 的 key
 // 对象遍历 let obj = {a: 111, b: 222, c: 333}; for(let key in obj) { console.log(key, obj[key]); } &amp;gt; &amp;#34;a&amp;#34; 111 &amp;gt; &amp;#34;b&amp;#34; 222 &amp;gt; &amp;#34;c&amp;#34; 333 // 数组遍历 let array = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]; for(let index in array) { console.log(index, array[index]); } &amp;gt; &amp;#34;0&amp;#34; &amp;#34;a&amp;#34; &amp;gt; &amp;#34;1&amp;#34; &amp;#34;b&amp;#34; &amp;gt; &amp;#34;2&amp;#34; &amp;#34;c&amp;#34;  for&amp;hellip;of  遍历数组元素，无法直接遍历 obj，需要搭配 Object.keys(obj)
 // 遍历数组 let array = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]; for (let item of array) { console.</description>
    </item>
    
  </channel>
</rss>